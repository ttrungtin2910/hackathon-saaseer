"""
Demo script ƒë·ªÉ test ƒë√°nh gi√° hi·ªáu su·∫•t v·ªõi m·ªôt s·ªë files m·∫´u
Ch·∫°y tr∆∞·ªõc khi x·ª≠ l√Ω to√†n b·ªô dataset
"""

import os
import sys
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from evaluation.evaluation_script import ContractExtractionEvaluator


def run_demo(num_files: int = 5):
    """Ch·∫°y demo v·ªõi s·ªë files gi·ªõi h·∫°n"""
    print(f"üß™ Ch·∫°y demo ƒë√°nh gi√° v·ªõi {num_files} files ƒë·∫ßu ti√™n...")
    print("-" * 60)
    
    try:
        # Kh·ªüi t·∫°o evaluator
        evaluator = ContractExtractionEvaluator("data")
        
        # L·∫•y danh s√°ch files v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
        all_files = evaluator.get_file_list()
        demo_files = all_files[:num_files]
        
        print(f"üìÅ S·∫Ω x·ª≠ l√Ω {len(demo_files)} files:")
        for i, file_path in enumerate(demo_files, 1):
            print(f"   {i}. {file_path.name}")
        
        print("\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
        
        # X·ª≠ l√Ω t·ª´ng file
        for i, file_path in enumerate(demo_files, 1):
            print(f"\nüìÑ ƒêang x·ª≠ l√Ω file {i}/{len(demo_files)}: {file_path.name}")
            
            result = evaluator.extract_from_single_file(file_path)
            evaluator.results.append(result)
            
            # C·∫≠p nh·∫≠t metrics
            if result['success']:
                evaluator.performance_metrics['successful_extractions'] += 1
                print(f"   ‚úÖ Th√†nh c√¥ng - ƒêi·ªÉm ch·∫•t l∆∞·ª£ng: {result['data_quality_score']}/100")
                print(f"   üìä D·ªØ li·ªáu tr√≠ch xu·∫•t:")
                print(f"      ‚Ä¢ Provider: {result.get('provider', 'N/A')}")
                print(f"      ‚Ä¢ Service: {result.get('service', 'N/A')}")
                print(f"      ‚Ä¢ Start Date: {result.get('start_date', 'N/A')}")
                print(f"      ‚Ä¢ End Date: {result.get('end_date', 'N/A')}")
                price = result.get('price', 'N/A')
                currency = result.get('currency', '')
                price_display = f"{price} {currency}".strip() if price != 'N/A' and price else 'N/A'
                print(f"      ‚Ä¢ Price: {price_display}")
            else:
                evaluator.performance_metrics['failed_extractions'] += 1
                print(f"   ‚ùå Th·∫•t b·∫°i - L·ªói: {result.get('error_message', 'Unknown error')}")
            
            print(f"   ‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω: {result['processing_time_seconds']}s")
            
            evaluator.performance_metrics['total_processing_time'] += result['processing_time_seconds']
        
        # C·∫≠p nh·∫≠t metrics cu·ªëi c√πng
        evaluator.performance_metrics['total_files'] = len(demo_files)
        evaluator._calculate_final_metrics()
        
        # Xu·∫•t k·∫øt qu·∫£ demo
        evaluator.export_to_excel("demo_evaluation_results.xlsx")
        
        # In t√≥m t·∫Øt
        print("\n" + "="*60)
        print("           K·∫æT QU·∫¢ DEMO ƒê√ÅNH GI√Å")
        print("="*60)
        evaluator.print_summary()
        
        print("üìä Files k·∫øt qu·∫£ demo:")
        print("   ‚Ä¢ demo_evaluation_results.xlsx")
        print("\n‚úÖ Demo ho√†n th√†nh! B√¢y gi·ªù c√≥ th·ªÉ ch·∫°y full evaluation v·ªõi:")
        print("   python run_evaluation.py")
        
    except Exception as e:
        print(f"\n‚ùå L·ªói khi ch·∫°y demo: {e}")
        sys.exit(1)


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Demo ƒë√°nh gi√° hi·ªáu su·∫•t AI")
    parser.add_argument("--files", "-f", type=int, default=5, 
                       help="S·ªë l∆∞·ª£ng files ƒë·ªÉ test (m·∫∑c ƒë·ªãnh: 5)")
    
    args = parser.parse_args()
    run_demo(args.files)
